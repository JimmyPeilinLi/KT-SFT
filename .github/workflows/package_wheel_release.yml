name: Build Wheels (Ubuntu 22.04, local artifacts)

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release? keep 0 for local artifacts only'
        default: '0'
        required: true
        type: string

jobs:
  build_wheels:
    name: ubuntu-22.04 Py=${{ matrix.pyver }} Torch=${{ matrix.torch }} cu${{ matrix.torch_cu }} CPU=${{ matrix.instruct }}
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - { pyver: '3.10', torch: '2.8.0', torch_cu: '126', cuda: '12.6.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'FANCY' }
          - { pyver: '3.11', torch: '2.8.0', torch_cu: '126', cuda: '12.6.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'FANCY' }
          - { pyver: '3.12', torch: '2.8.0', torch_cu: '126', cuda: '12.6.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'FANCY' }
          # - { pyver: '3.11', torch: '2.8.0', torch_cu: '124', cuda: '12.4.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'FANCY' }
          # - { pyver: '3.12', torch: '2.8.0', torch_cu: '124', cuda: '12.4.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'FANCY' }
          # - { pyver: '3.10', torch: '2.8.0', torch_cu: '125', cuda: '12.5.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'FANCY' }
          # - { pyver: '3.10', torch: '2.8.0', torch_cu: '124', cuda: '12.4.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'AVX512' }
          # - { pyver: '3.10', torch: '2.8.0', torch_cu: '124', cuda: '12.4.1', cudaarch: '8.0;8.6;8.7;8.9;9.0+PTX', instruct: 'AVX2' }

    defaults:
      run:
        shell: bash -l {0}   # 关键：用 bash login shell，保证 conda 激活

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: true

      - name: Setup Mamba (Miniforge)
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ktransformers
          python-version: ${{ matrix.pyver }}
          miniforge-variant: Miniforge3
          miniforge-version: latest
          use-mamba: true
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: Check Disk
        run: df -h

      - name: (Optional) Build website
        run: |
          if [ -d "ktransformers/website" ]; then
            pushd ktransformers/website
            npm ci
            npm run build
            popd
          else
            echo "website dir not found; skip"
          fi

      - name: Install CUDA (from NVIDIA channel)
        env:
          CUDA_VER: ${{ matrix.cuda }}
        run: |
          mamba install -y -c nvidia/label/cuda-$CUDA_VER cuda-toolkit cuda-runtime
          export CUDA_HOME="$CONDA_PREFIX"
          export CUDA_PATH="$CONDA_PREFIX"
          mkdir -p "$CUDA_HOME/lib64" || true
          export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$CONDA_PREFIX/lib/python${{ matrix.pyver }}/site-packages/nvidia/nvjitlink/lib:$LD_LIBRARY_PATH"
          echo "CUDA_HOME=$CUDA_HOME" >> $GITHUB_ENV
          echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install build deps + Torch
        run: |
          python -m pip install --upgrade pip
          python -m pip install "cmake>=3.25.0" ninja packaging setuptools wheel build auditwheel
          python -m pip install "torch==${{ matrix.torch }}" torchvision torchaudio --index-url https://download.pytorch.org/whl/cu${{ matrix.torch_cu }}

      - name: Build wheel from source (force, no prebuilt)
        env:
          KTRANSFORMERS_FORCE_BUILD: "TRUE"
          KTRANSFORMERS_DISABLE_PREBUILT: "1"
          CPU_INSTRUCT: ${{ matrix.instruct }}
          TORCH_CUDA_ARCH_LIST: ${{ matrix.cudaarch }}
        run: |
          rm -rf build/ dist/ csrc/ktransformers_ext/build
          python -m build --no-isolation --verbose
          python - <<'PY'
import glob,zipfile,sys
w=sorted(glob.glob("dist/*.whl"))
assert w, "no wheels"
w=w[-1]
with zipfile.ZipFile(w) as z:
    names=z.namelist()
    assert any("cpuinfer_ext" in n for n in names), f"wheel missing cpuinfer_ext: {w}\nFound: {names}"
print("OK - wheel contains cpuinfer_ext:", w)
PY

      - name: Auditwheel repair (manylinux)
        run: |
          mkdir -p dist/repaired
          auditwheel show dist/*.whl || true
          auditwheel repair -w dist/repaired dist/*.whl
          ls -lh dist dist/repaired || true

      - name: Upload artifacts (local testing)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu22.04-py${{ matrix.pyver }}-cu${{ matrix.torch_cu }}-${{ matrix.instruct }}
          path: |
            dist/*.whl
            dist/repaired/*.whl
