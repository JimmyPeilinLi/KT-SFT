{
  "scanned_at": "2025-09-23T12:31:09",
  "root": "/home/lpl/KT-SFT/ktransformers",
  "files_scanned": 179,
  "files_with_chinese": 31,
  "total_matches": 2515,
  "details": [
    {
      "path": "/home/lpl/KT-SFT/ktransformers/sft/lora.py",
      "encoding": "utf-8",
      "file_match_count": 393,
      "lines": [
        {
          "line_no": 78,
          "match_count": 5,
          "indices": [
            6,
            7,
            17,
            27,
            28
          ],
          "unique_matched_chars": "在套时止禁",
          "snippet": "    # 禁止 Trainer 在 n_gpu>1 时套 DataParallel"
        },
        {
          "line_no": 211,
          "match_count": 14,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            27,
            40,
            41,
            42,
            54,
            55,
            56
          ],
          "unique_matched_chars": "不乘修固定心核正用的练训，：",
          "snippet": "    # ★ 核心修正：训练 DataLoader 的 batch_size 固定用 per_d"
        },
        {
          "line_no": 223,
          "match_count": 23,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42
          ],
          "unique_matched_chars": "一与于列则剔包原否基层无生用的移致除：；",
          "snippet": "        # 与原生一致：基于 datasets 的移除无用列；否则包一层剔列的 collato"
        },
        {
          "line_no": 226,
          "match_count": 5,
          "indices": [
            35,
            36,
            37,
            50,
            51
          ],
          "unique_matched_chars": "于仅查检用",
          "snippet": "                import datasets  # 仅用于 isinstance 检查"
        },
        {
          "line_no": 232,
          "match_count": 16,
          "indices": [
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42
          ],
          "unique_matched_chars": "不兼列到剔化可容或时本版用退，",
          "snippet": "                # datasets 不可用或版本不兼容时，退化到剔列 collator"
        },
        {
          "line_no": 237,
          "match_count": 12,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            29,
            41,
            42,
            43
          ],
          "unique_matched_chars": "不与原同生用这里，：",
          "snippet": "        # 这里与原生不同：batch_size 用 per_device，不用 self._"
        },
        {
          "line_no": 239,
          "match_count": 2,
          "indices": [
            71,
            72
          ],
          "unique_matched_chars": "不乘",
          "snippet": "args.per_device_train_batch_size,   # ★ 不乘 n_gpu"
        },
        {
          "line_no": 246,
          "match_count": 5,
          "indices": [
            10,
            28,
            29,
            30,
            31
          ],
          "unique_matched_chars": "充时补非，",
          "snippet": "        # 非 IterableDataset 时，补充 sampler / drop_las"
        },
        {
          "line_no": 251,
          "match_count": 16,
          "indices": [
            14,
            15,
            31,
            32,
            33,
            34,
            52,
            53,
            54,
            55,
            56,
            75,
            76,
            77,
            78,
            79
          ],
          "unique_matched_chars": "一与且了仅传当才时求置致要设（）",
          "snippet": "            # 仅当 num_workers>0 且设置了 prefetch_factor 时才传"
        },
        {
          "line_no": 257,
          "match_count": 12,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            31,
            32,
            33
          ],
          "unique_matched_chars": "不为了做全告完式显要诉，",
          "snippet": "        # 为了完全显式，告诉 Accelerate 不要做 device_placement"
        },
        {
          "line_no": 261,
          "match_count": 11,
          "indices": [
            14,
            15,
            28,
            29,
            30,
            31,
            50,
            51,
            52,
            53,
            54
          ],
          "unique_matched_chars": "些参接数有本某没版直，",
          "snippet": "            # 某些 accelerate 版本没有 device_placement 参数，直接"
        },
        {
          "line_no": 266,
          "match_count": 23,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            37,
            38
          ],
          "unique_matched_chars": "一与到动原后唯回把挪改时是最步生练致训返，：",
          "snippet": "    # === 训练步：与原生一致，唯一改动是最后返回时把 loss 挪到 self.args.d"
        },
        {
          "line_no": 277,
          "match_count": 20,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            34,
            35,
            36,
            37,
            55
          ],
          "unique_matched_chars": "会保关准到原备张把据放数生留的量键（，：",
          "snippet": "        # ★ 关键：保留原生的数据准备（会把 batch 张量放到 self.args.devi"
        },
        {
          "line_no": 278,
          "match_count": 24,
          "indices": [
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35
          ],
          "unique_matched_chars": "义你内决向块多子定很换据是替模此流的算自部）",
          "snippet": "        #  你的自定义算子/替换模块很多是据此决定内部流向的）"
        },
        {
          "line_no": 283,
          "match_count": 15,
          "indices": [
            16,
            17,
            18,
            19,
            20,
            33,
            34,
            35,
            36,
            37,
            42,
            43,
            44,
            45,
            46
          ],
          "unique_matched_chars": "值到回备接放查检满的直设足返，",
          "snippet": "            # ★ 返回值放到 args.device，直接满足 HF 的设备检查"
        },
        {
          "line_no": 286,
          "match_count": 12,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            33,
            34
          ],
          "unique_matched_chars": "一上下与原文生的等致（）",
          "snippet": "        # 与原生一致的上下文（amp/autocast 等）"
        },
        {
          "line_no": 290,
          "match_count": 2,
          "indices": [
            10,
            11
          ],
          "unique_matched_chars": "放释",
          "snippet": "        # 释放 batch"
        },
        {
          "line_no": 293,
          "match_count": 9,
          "indices": [
            10,
            11,
            12,
            26,
            27,
            28,
            29,
            30,
            31
          ],
          "unique_matched_chars": "原抄步照生的骤（）",
          "snippet": "        # 原生的 empty_cache 步骤（照抄）"
        },
        {
          "line_no": 317,
          "match_count": 5,
          "indices": [
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "习学率要需",
          "snippet": "        # LOMO 需要学习率"
        },
        {
          "line_no": 321,
          "match_count": 28,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37
          ],
          "unique_matched_chars": "下但你保值做兼况卡在均型多容并情持据数是模现行（），",
          "snippet": "        # 多卡数据并行情况下做均值（你现在是模型并行，但保持兼容）"
        },
        {
          "line_no": 325,
          "match_count": 2,
          "indices": [
            19,
            20
          ],
          "unique_matched_chars": "径路",
          "snippet": "        # Apex/amp 路径"
        },
        {
          "line_no": 330,
          "match_count": 27,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46
          ],
          "unique_matched_chars": "一不与义原定度当户按放数时是梯步生用积算累缩自致计，：",
          "snippet": "            # 与原生一致：当 loss 不是用户自定义计算时，按梯度累积步数缩放"
        },
        {
          "line_no": 334,
          "match_count": 4,
          "indices": [
            24,
            25,
            31,
            32
          ],
          "unique_matched_chars": "关放缩闭",
          "snippet": "            # DeepSpeed 关闭 gas 缩放"
        },
        {
          "line_no": 341,
          "match_count": 12,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            29,
            36,
            37,
            38
          ],
          "unique_matched_chars": "一动唯回在必改的给返须：",
          "snippet": "        # ★ 唯一改动：返回给 Trainer 的 loss 必须在 self.args.dev"
        },
        {
          "line_no": 346,
          "match_count": 11,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            35,
            36,
            37
          ],
          "unique_matched_chars": "一可开性查次看试调（）",
          "snippet": "        # 一次性调试（可开 `KT_DBG_STEP=1` 查看）"
        },
        {
          "line_no": 416,
          "match_count": 20,
          "indices": [
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            61,
            62,
            63,
            64,
            65
          ],
          "unique_matched_chars": "一不个入写到型是样模每的要这里需面，",
          "snippet": "        target_modules=[ # TODO: 这里需要写入到shell里面，每个模型的template是不一样的"
        },
        {
          "line_no": 484,
          "match_count": 4,
          "indices": [
            6,
            7,
            9,
            10
          ],
          "unique_matched_chars": "兼容洗清",
          "snippet": "    # 兼容/清洗"
        },
        {
          "line_no": 486,
          "match_count": 11,
          "indices": [
            11,
            12,
            13,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            70
          ],
          "unique_matched_chars": "出字导旧有段用的（）：",
          "snippet": "    # bias 字段：'none' | 'all' | 'lora_only'（有的旧导出用 lo"
        },
        {
          "line_no": 490,
          "match_count": 12,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            21,
            27,
            28,
            29,
            36,
            37,
            43
          ],
          "unique_matched_chars": "仅兼字容层带旧段示表（）",
          "snippet": "    # 兼容旧字段 lora_bias（True 表示仅 LoRA 层带 bias）"
        },
        {
          "line_no": 494,
          "match_count": 14,
          "indices": [
            21,
            22,
            23,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "串为也分可号字既是符能逗隔",
          "snippet": "    # target_modules 既可为 list 也可能是逗号分隔字符串"
        },
        {
          "line_no": 499,
          "match_count": 3,
          "indices": [
            22,
            23,
            30
          ],
          "unique_matched_chars": "为可或",
          "snippet": "    # modules_to_save 可为 None 或 list"
        },
        {
          "line_no": 504,
          "match_count": 10,
          "indices": [
            17,
            27,
            28,
            29,
            30,
            36,
            37,
            44,
            45,
            46
          ],
          "unique_matched_chars": "传净可干是更的空能；",
          "snippet": "    # rank/alpha 的 pattern 可能是空 dict；传 None 更干净"
        },
        {
          "line_no": 513,
          "match_count": 2,
          "indices": [
            51,
            52
          ],
          "unique_matched_chars": "例如",
          "snippet": "k_type=TaskType[task_type_str],       # 例如 TaskType.CAUSAL_LM"
        },
        {
          "line_no": 514,
          "match_count": 2,
          "indices": [
            51,
            52
          ],
          "unique_matched_chars": "例如",
          "snippet": "get_modules=tmods,                    # 例如 [\"q_proj\",\"k_proj\",...]"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/mmlu_test_multi.py",
      "encoding": "utf-8",
      "file_match_count": 269,
      "lines": [
        {
          "line_no": 21,
          "match_count": 14,
          "indices": [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            25
          ],
          "unique_matched_chars": "取型如提最模测的终选项预（）",
          "snippet": "    提取模型预测的最终选项（如 A/B/C/D）"
        },
        {
          "line_no": 22,
          "match_count": 22,
          "indices": [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33
          ],
          "unique_matched_chars": "、亮多尾式持支末格然等结自行言论语非高",
          "snippet": "    支持自然语言、多行、markdown、高亮、非末尾结论等格式"
        },
        {
          "line_no": 26,
          "match_count": 10,
          "indices": [
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "优先匹句式显语配（）",
          "snippet": "    # 1. 显式语句匹配（优先）"
        },
        {
          "line_no": 42,
          "match_count": 2,
          "indices": [
            18,
            19
          ],
          "unique_matched_chars": "强调",
          "snippet": "    # 2. markdown 强调 **C**, **C. something**"
        },
        {
          "line_no": 47,
          "match_count": 8,
          "indices": [
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            21
          ],
          "unique_matched_chars": "中单号引或找查的",
          "snippet": "    # 3. 查找单引号中的 'C' 或 \"C\""
        },
        {
          "line_no": 52,
          "match_count": 10,
          "indices": [
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            22,
            28,
            29
          ],
          "unique_matched_chars": "以倒几否头开或数是行",
          "snippet": "    # 4. 倒数几行是否以 \"C.\" 或 \"C\" 开头"
        },
        {
          "line_no": 60,
          "match_count": 6,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11
          ],
          "unique_matched_chars": "不再回就行返",
          "snippet": "    # 再不行就返回 None"
        },
        {
          "line_no": 68,
          "match_count": 21,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "一个中从件例加实对应录据数文条每记载，",
          "snippet": "        从数据文件中加载数据，每条记录对应一个实例"
        },
        {
          "line_no": 79,
          "match_count": 18,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25
          ],
          "unique_matched_chars": "信合和完录息成据提数整生的目示结记题",
          "snippet": "        结合提示信息和记录数据生成完整的题目"
        },
        {
          "line_no": 87,
          "match_count": 29,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36
          ],
          "unique_matched_chars": "一个取只后回处字对成提文最本案理生的符答终行返进（），",
          "snippet": "        对生成的文本进行后处理，提取最终答案（只返回最后一个字符）"
        },
        {
          "line_no": 94,
          "match_count": 16,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23
          ],
          "unique_matched_chars": "分和回对得案正比测确答返预，",
          "snippet": "        对比预测答案和正确答案，返回得分"
        },
        {
          "line_no": 104,
          "match_count": 8,
          "indices": [
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45
          ],
          "unique_matched_chars": "入填如有要请需，",
          "snippet": "        'Authorization': 'Bearer '  # 如有需要，请填入 API Key"
        },
        {
          "line_no": 127,
          "match_count": 18,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23
          ],
          "unique_matched_chars": "乱例实并序打择据数测的要试选需顺，",
          "snippet": "    # 打乱数据顺序，并选择需要测试的实例数"
        },
        {
          "line_no": 132,
          "match_count": 8,
          "indices": [
            23,
            24,
            25,
            26,
            27,
            32,
            33,
            34
          ],
          "unique_matched_chars": "个例多实批最次每",
          "snippet": "    batch_size = 10  # 每批次最多 10 个实例"
        },
        {
          "line_no": 143,
          "match_count": 15,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            50
          ],
          "unique_matched_chars": "字将成换数案正母确答转（）：",
          "snippet": "            # 正确答案：将数字转换成字母（0->A, 1->B, 2->C, 3->D）"
        },
        {
          "line_no": 158,
          "match_count": 13,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26
          ],
          "unique_matched_chars": "保入全写加安时果程线结证锁",
          "snippet": "            # 写入结果时加锁保证线程安全"
        },
        {
          "line_no": 168,
          "match_count": 13,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            20,
            21,
            22
          ],
          "unique_matched_chars": "个任务处多批按最次每理，",
          "snippet": "    # 按批次处理，每批最多 10 个任务"
        },
        {
          "line_no": 197,
          "match_count": 9,
          "indices": [
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78
          ],
          "unique_matched_chars": "例实总数测的要试需",
          "snippet": "current\", type=int, default=1000, help=\"需要测试的实例总数\")"
        },
        {
          "line_no": 198,
          "match_count": 6,
          "indices": [
            71,
            72,
            73,
            74,
            75,
            76
          ],
          "unique_matched_chars": "件径据数文路",
          "snippet": "\", type=str, default=\"cais/mmlu\", help=\"数据文件路径\")"
        },
        {
          "line_no": 199,
          "match_count": 8,
          "indices": [
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97
          ],
          "unique_matched_chars": "件保存径文果结路",
          "snippet": "ult=\"./mmlu_result_silicon.json\", help=\"结果文件保存路径\")"
        },
        {
          "line_no": 200,
          "match_count": 8,
          "indices": [
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93
          ],
          "unique_matched_chars": "件保存径志文日路",
          "snippet": "ault=\"./mmlu_result_silicon.log\", help=\"日志文件保存路径\")"
        },
        {
          "line_no": 201,
          "match_count": 7,
          "indices": [
            90,
            91,
            92,
            93,
            94,
            95,
            96
          ],
          "unique_matched_chars": "名型径或模称路",
          "snippet": "lt=\"Pro/deepseek-ai/DeepSeek-V3\", help=\"模型名称或路径\")"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/moe_test_module.py",
      "encoding": "utf-8",
      "file_match_count": 239,
      "lines": [
        {
          "line_no": 33,
          "match_count": 7,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "unique_matched_chars": "保定性确算计",
          "snippet": "        # 确保计算确定性"
        },
        {
          "line_no": 38,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "义值固定预",
          "snippet": "        # 预定义固定值"
        },
        {
          "line_no": 44,
          "match_count": 8,
          "indices": [
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "入创固定建据数输",
          "snippet": "        \"\"\"创建固定输入数据\"\"\""
        },
        {
          "line_no": 46,
          "match_count": 13,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26
          ],
          "unique_matched_chars": "使可固复子定成据数生用种重",
          "snippet": "            # 使用固定种子生成可重复数据"
        },
        {
          "line_no": 51,
          "match_count": 6,
          "indices": [
            18,
            19,
            20,
            21,
            22,
            23
          ],
          "unique_matched_chars": "入固定张输量",
          "snippet": "                # 固定输入张量"
        },
        {
          "line_no": 54,
          "match_count": 28,
          "indices": [
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            27,
            28,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            40,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            52
          ],
          "unique_matched_chars": "一专个二例和固定家择本样的示第选，",
          "snippet": "                # 固定选择的专家 (示例: 第一个样本选专家0和1，第二个样本选专家2和3)"
        },
        {
          "line_no": 57,
          "match_count": 19,
          "indices": [
            18,
            19,
            20,
            21,
            24,
            25,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "专两个例同固定家本权样每的相示重",
          "snippet": "                # 固定权重 (示例: 每个样本的两个专家权重相同)"
        },
        {
          "line_no": 60,
          "match_count": 7,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "unique_matched_chars": "到备标目移设转",
          "snippet": "        # 转移到目标设备"
        },
        {
          "line_no": 68,
          "match_count": 19,
          "indices": [
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29
          ],
          "unique_matched_chars": "上传前反向回在备定并度指播梯行设运返",
          "snippet": "        \"\"\"在指定设备上运行前向反向传播并返回梯度\"\"\""
        },
        {
          "line_no": 69,
          "match_count": 8,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17
          ],
          "unique_matched_chars": "固子定所有机种随",
          "snippet": "        # 固定所有随机种子"
        },
        {
          "line_no": 74,
          "match_count": 10,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "初到化型备始标模目设",
          "snippet": "        # 初始化模型到目标设备"
        },
        {
          "line_no": 84,
          "match_count": 8,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17
          ],
          "unique_matched_chars": "入固定成据数生输",
          "snippet": "        # 生成固定输入数据"
        },
        {
          "line_no": 87,
          "match_count": 12,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "上保参在型备数模正确设",
          "snippet": "        # 确保模型参数在正确设备上"
        },
        {
          "line_no": 90,
          "match_count": 9,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "使全制度强用算精计",
          "snippet": "        # 强制使用全精度计算"
        },
        {
          "line_no": 94,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "传反向播",
          "snippet": "        # 反向传播"
        },
        {
          "line_no": 98,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "度收梯集",
          "snippet": "        # 收集梯度"
        },
        {
          "line_no": 107,
          "match_count": 2,
          "indices": [
            13,
            14
          ],
          "unique_matched_chars": "行运",
          "snippet": "        # CPU运行"
        },
        {
          "line_no": 110,
          "match_count": 6,
          "indices": [
            13,
            14,
            17,
            18,
            19,
            20
          ],
          "unique_matched_chars": "可如果用行运",
          "snippet": "        # GPU运行 (如果可用)"
        },
        {
          "line_no": 117,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "入度梯比较输",
          "snippet": "            # 输入梯度比较"
        },
        {
          "line_no": 120,
          "match_count": 6,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            60
          ],
          "unique_matched_chars": "大差度异梯过",
          "snippet": "elf.assertLess(input_diff, 1e-5, f\"Input梯度差异过大: {input_diff.item()}\")"
        },
        {
          "line_no": 122,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "参度数梯比较",
          "snippet": "            # 参数梯度比较"
        },
        {
          "line_no": 126,
          "match_count": 8,
          "indices": [
            54,
            55,
            61,
            62,
            63,
            64,
            65,
            66
          ],
          "unique_matched_chars": "参大差度异数梯过",
          "snippet": "  # self.assertLess(param_diff, 1e-5, f\"参数 {i} 梯度差异过大: {param_diff.item()}\")"
        },
        {
          "line_no": 128,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "型对度梯模比",
          "snippet": "            # 模型梯度对比"
        },
        {
          "line_no": 131,
          "match_count": 8,
          "indices": [
            24,
            25,
            26,
            27,
            33,
            34,
            35,
            36
          ],
          "unique_matched_chars": "参大差度异数最梯",
          "snippet": "                print(f\"参数梯度 {i} 最大差异: {diff.item()}\")"
        },
        {
          "line_no": 133,
          "match_count": 15,
          "indices": [
            30,
            31,
            32,
            33,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49
          ],
          "unique_matched_chars": "值出参大差度异数最梯超阈，",
          "snippet": "                            f\"参数梯度 {i} 差异超出阈值，最大差异: {diff.item()}\")"
        },
        {
          "line_no": 136,
          "match_count": 8,
          "indices": [
            31,
            32,
            33,
            34,
            35,
            36,
            40,
            41
          ],
          "unique_matched_chars": "不可测用试跳过，",
          "snippet": "            self.skipTest(\"CUDA不可用，跳过GPU测试\")"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/operators/experts.py",
      "encoding": "utf-8",
      "file_match_count": 207,
      "lines": [
        {
          "line_no": 445,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "关属性相统计",
          "snippet": "        # 统计相关属性"
        },
        {
          "line_no": 595,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "始开录时记间",
          "snippet": "            # 记录开始时间"
        },
        {
          "line_no": 622,
          "match_count": 11,
          "indices": [
            56,
            59,
            60,
            61,
            62,
            66,
            67,
            68,
            69,
            70,
            71
          ],
          "unique_matched_chars": "三个乘加次矩阵（）",
          "snippet": "d = 6 * qlen * k * H_FIXED * M_FIXED # 2（2 次乘加）* 3（三个矩阵）= 6"
        },
        {
          "line_no": 625,
          "match_count": 3,
          "indices": [
            10,
            21,
            22
          ],
          "unique_matched_chars": "把留给",
          "snippet": "        # 把 qlen / k 留给 backward"
        },
        {
          "line_no": 654,
          "match_count": 4,
          "indices": [
            10,
            11,
            15,
            16
          ],
          "unique_matched_chars": "后用端调",
          "snippet": "        # 调用C++后端"
        },
        {
          "line_no": 674,
          "match_count": 3,
          "indices": [
            45,
            46,
            47
          ],
          "unique_matched_chars": "正的确",
          "snippet": "   qlen, k  = ctx.saved_dims          # 正确的 q / k"
        },
        {
          "line_no": 899,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "关属性相统计",
          "snippet": "        # 统计相关属性"
        },
        {
          "line_no": 903,
          "match_count": 6,
          "indices": [
            10,
            11,
            17,
            18,
            19,
            20
          ],
          "unique_matched_chars": "式录格细记详",
          "snippet": "        # 详细FLOPs记录格式: [{'gate': flops, 'act': ...}"
        },
        {
          "line_no": 907,
          "match_count": 5,
          "indices": [
            10,
            11,
            12,
            13,
            14
          ],
          "unique_matched_chars": "参数算计量",
          "snippet": "        # 参数量计算"
        },
        {
          "line_no": 1029,
          "match_count": 7,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "unique_matched_chars": "初化变始统计量",
          "snippet": "        # 初始化统计变量"
        },
        {
          "line_no": 1044,
          "match_count": 4,
          "indices": [
            14,
            15,
            21,
            22
          ],
          "unique_matched_chars": "分算计项",
          "snippet": "            # 分项FLOPs计算"
        },
        {
          "line_no": 1052,
          "match_count": 3,
          "indices": [
            14,
            15,
            16
          ],
          "unique_matched_chars": "总累计",
          "snippet": "            # 累计总FLOPs"
        },
        {
          "line_no": 1057,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "录据数细记详",
          "snippet": "            # 记录详细数据"
        },
        {
          "line_no": 1067,
          "match_count": 8,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17
          ],
          "unique_matched_chars": "信录息本次用记调",
          "snippet": "        # 记录本次调用信息"
        },
        {
          "line_no": 1078,
          "match_count": 13,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24
          ],
          "unique_matched_chars": "两之录时次用的记调间隔",
          "snippet": "    #     # 记录两次调用之间的时间间隔"
        },
        {
          "line_no": 1087,
          "match_count": 10,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "初化变各始时段计量阶",
          "snippet": "    #     # 初始化各阶段计时变量"
        },
        {
          "line_no": 1099,
          "match_count": 6,
          "indices": [
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "据数段移迁阶",
          "snippet": "    #     # ====================== 数据迁移阶段 ======================"
        },
        {
          "line_no": 1107,
          "match_count": 10,
          "indices": [
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42
          ],
          "unique_matched_chars": "与初化型始张换类转量",
          "snippet": "    #     # ==================== 张量初始化与类型转换 =================="
        },
        {
          "line_no": 1118,
          "match_count": 4,
          "indices": [
            44,
            45,
            46,
            47
          ],
          "unique_matched_chars": "成段生阶",
          "snippet": "#     # ==================== Expert Mask生成阶段 =================="
        },
        {
          "line_no": 1123,
          "match_count": 8,
          "indices": [
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "专处家循段环理阶",
          "snippet": "    #     # ==================== 专家循环处理阶段 ======================"
        },
        {
          "line_no": 1127,
          "match_count": 8,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62
          ],
          "unique_matched_chars": "侧左度提条示语进",
          "snippet": "          desc=\"Loading experts\",     # 进度条左侧提示语"
        },
        {
          "line_no": 1128,
          "match_count": 8,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62
          ],
          "unique_matched_chars": "位单可计选量（）",
          "snippet": "          unit=\"expert\"):             # 计量单位（可选）"
        },
        {
          "line_no": 1131,
          "match_count": 8,
          "indices": [
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "专准前备家当据数",
          "snippet": "    #         # ---- 当前专家数据准备 ----"
        },
        {
          "line_no": 1134,
          "match_count": 4,
          "indices": [
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "段算计阶",
          "snippet": "    #         # ---- Gate计算阶段 ----"
        },
        {
          "line_no": 1140,
          "match_count": 6,
          "indices": [
            23,
            24,
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "影投段算计阶",
          "snippet": "    #         # ---- Up投影计算阶段 ----"
        },
        {
          "line_no": 1145,
          "match_count": 7,
          "indices": [
            21,
            22,
            23,
            24,
            25,
            26,
            27
          ],
          "unique_matched_chars": "乘作元操段素阶",
          "snippet": "    #         # ---- 元素乘操作阶段 ----"
        },
        {
          "line_no": 1150,
          "match_count": 6,
          "indices": [
            25,
            26,
            27,
            28,
            29,
            30
          ],
          "unique_matched_chars": "影投段算计阶",
          "snippet": "    #         # ---- Down投影计算阶段 ----"
        },
        {
          "line_no": 1155,
          "match_count": 4,
          "indices": [
            30,
            31,
            32,
            33
          ],
          "unique_matched_chars": "作操段阶",
          "snippet": "    #         # ---- Index Add操作阶段 ----"
        },
        {
          "line_no": 1161,
          "match_count": 8,
          "indices": [
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "原回备换果结设转",
          "snippet": "    #     # ==================== 结果转换回原设备 ======================"
        },
        {
          "line_no": 1166,
          "match_count": 8,
          "indices": [
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "录所时有果结计记",
          "snippet": "    #     # ==================== 记录所有计时结果 ======================"
        },
        {
          "line_no": 1197,
          "match_count": 11,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22
          ],
          "unique_matched_chars": "一后戳新时更最次用调间",
          "snippet": "    #     # 更新最后一次调用时间戳"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/balance_serve/sched_rpc.py",
      "encoding": "utf-8",
      "file_match_count": 202,
      "lines": [
        {
          "line_no": 26,
          "match_count": 8,
          "indices": [
            10,
            11,
            23,
            24,
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "例创初化始实并建",
          "snippet": "        # 创建 Scheduler 实例并初始化"
        },
        {
          "line_no": 29,
          "match_count": 10,
          "indices": [
            10,
            11,
            12,
            21,
            22,
            23,
            24,
            25,
            26,
            27
          ],
          "unique_matched_chars": "上下初化和套始字接文",
          "snippet": "        # 初始化 ZeroMQ 上下文和套接字"
        },
        {
          "line_no": 35,
          "match_count": 18,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35
          ],
          "unique_matched_chars": "与于作信内创套字工建接用的程线通部，",
          "snippet": "        # 创建内部的 DEALER 套接字，用于与工作线程通信"
        },
        {
          "line_no": 39,
          "match_count": 5,
          "indices": [
            6,
            7,
            8,
            9,
            10
          ],
          "unique_matched_chars": "动启器度调",
          "snippet": "    # 启动调度器"
        },
        {
          "line_no": 43,
          "match_count": 5,
          "indices": [
            6,
            7,
            8,
            9,
            10
          ],
          "unique_matched_chars": "停器度止调",
          "snippet": "    # 停止调度器"
        },
        {
          "line_no": 47,
          "match_count": 7,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11,
            12
          ],
          "unique_matched_chars": "处客户求理端请",
          "snippet": "    # 处理客户端请求"
        },
        {
          "line_no": 49,
          "match_count": 22,
          "indices": [
            10,
            11,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36
          ],
          "unique_matched_chars": "代作使内分前发后将工求理用的程端线给置请，",
          "snippet": "        # 使用 ZMQ 的内置代理，将前端请求分发给后端工作线程"
        },
        {
          "line_no": 52,
          "match_count": 8,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "作处工求理程线请",
          "snippet": "    # 工作线程处理请求"
        },
        {
          "line_no": 58,
          "match_count": 7,
          "indices": [
            18,
            19,
            20,
            21,
            22,
            23,
            24
          ],
          "unique_matched_chars": "客户接收求端请",
          "snippet": "                # 接收客户端请求"
        },
        {
          "line_no": 67,
          "match_count": 7,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            70,
            71
          ],
          "unique_matched_chars": "一个对接是直象",
          "snippet": "     query_add = params.get('query')  # 直接是一个 QueryAdd 对象"
        },
        {
          "line_no": 68,
          "match_count": 4,
          "indices": [
            22,
            23,
            24,
            25
          ],
          "unique_matched_chars": "加查添询",
          "snippet": "                    # 添加查询"
        },
        {
          "line_no": 70,
          "match_count": 4,
          "indices": [
            22,
            23,
            24,
            25
          ],
          "unique_matched_chars": "发响应送",
          "snippet": "                    # 发送响应"
        },
        {
          "line_no": 76,
          "match_count": 10,
          "indices": [
            22,
            23,
            24,
            25,
            37,
            38,
            39,
            40,
            49,
            50
          ],
          "unique_matched_chars": "了假实您方法现的类设",
          "snippet": "                    # 假设您的 Scheduler 类实现了 cancel 方法"
        },
        {
          "line_no": 82,
          "match_count": 12,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            78,
            79
          ],
          "unique_matched_chars": "一个列包含对接是直表象，",
          "snippet": "     updates = params.get('updates')  # 直接是一个列表，包含 QueryUpdate 对象"
        },
        {
          "line_no": 84,
          "match_count": 8,
          "indices": [
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29
          ],
          "unique_matched_chars": "一个后批新更最次",
          "snippet": "                    # 更新最后一个批次"
        },
        {
          "line_no": 87,
          "match_count": 6,
          "indices": [
            22,
            23,
            24,
            25,
            38,
            39
          ],
          "unique_matched_chars": "发对接直象送",
          "snippet": "                    # 直接发送 batch_todo 对象"
        },
        {
          "line_no": 109,
          "match_count": 4,
          "indices": [
            22,
            23,
            24,
            25
          ],
          "unique_matched_chars": "方未法知",
          "snippet": "                    # 未知方法"
        },
        {
          "line_no": 114,
          "match_count": 11,
          "indices": [
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "发响处常并应异理误送错",
          "snippet": "                # 处理异常并发送错误响应"
        },
        {
          "line_no": 118,
          "match_count": 4,
          "indices": [
            6,
            7,
            13,
            14
          ],
          "unique_matched_chars": "务动启服",
          "snippet": "    # 启动 RPC 服务"
        },
        {
          "line_no": 123,
          "match_count": 12,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25
          ],
          "unique_matched_chars": "中单器在度独的程线行调运",
          "snippet": "            # 在单独的线程中运行调度器"
        },
        {
          "line_no": 126,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "作动启工程线",
          "snippet": "            # 启动工作线程"
        },
        {
          "line_no": 127,
          "match_count": 9,
          "indices": [
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43
          ],
          "unique_matched_chars": "据数整根程线要调需",
          "snippet": "            for _ in range(10):  # 根据需要调整线程数"
        },
        {
          "line_no": 130,
          "match_count": 11,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24
          ],
          "unique_matched_chars": "代动听启始开求理监请，",
          "snippet": "            # 启动代理，开始监听请求"
        },
        {
          "line_no": 137,
          "match_count": 4,
          "indices": [
            6,
            7,
            13,
            14
          ],
          "unique_matched_chars": "停务服止",
          "snippet": "    # 停止 RPC 服务"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/moe_test_module_old.py",
      "encoding": "utf-8",
      "file_match_count": 194,
      "lines": [
        {
          "line_no": 33,
          "match_count": 7,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "unique_matched_chars": "保定性确算计",
          "snippet": "        # 确保计算确定性"
        },
        {
          "line_no": 36,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "初到化型始模",
          "snippet": "        # 初始化模型到CPU"
        },
        {
          "line_no": 49,
          "match_count": 19,
          "indices": [
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29
          ],
          "unique_matched_chars": "上传前反向回在备定并度指播梯行设运返",
          "snippet": "        \"\"\"在指定设备上运行前向反向传播并返回梯度\"\"\""
        },
        {
          "line_no": 50,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "固子定机种随",
          "snippet": "        # 固定随机种子"
        },
        {
          "line_no": 55,
          "match_count": 12,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "克型带态携数时机模状隆随",
          "snippet": "        # 克隆模型时携带随机数状态"
        },
        {
          "line_no": 65,
          "match_count": 9,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "入定性成据数生确输",
          "snippet": "        # 生成确定性输入数据"
        },
        {
          "line_no": 77,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "加备添设证验",
          "snippet": "        # 添加设备验证"
        },
        {
          "line_no": 87,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "传前向播",
          "snippet": "        # 前向传播"
        },
        {
          "line_no": 90,
          "match_count": 8,
          "indices": [
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74
          ],
          "unique_matched_chars": "制合度强混用禁精",
          "snippet": "(device_type=device, enabled=False):  # 强制禁用混合精度"
        },
        {
          "line_no": 93,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "传反向播",
          "snippet": "        # 反向传播"
        },
        {
          "line_no": 97,
          "match_count": 6,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17
          ],
          "unique_matched_chars": "化可图算视计",
          "snippet": "        # # 可视化计算图"
        },
        {
          "line_no": 103,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "度收梯集",
          "snippet": "        # 收集梯度"
        },
        {
          "line_no": 112,
          "match_count": 10,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "参型基数模础类证验",
          "snippet": "        # # 验证基础模型参数类型"
        },
        {
          "line_no": 116,
          "match_count": 4,
          "indices": [
            10,
            14,
            15,
            16
          ],
          "unique_matched_chars": "上在行运",
          "snippet": "        # 在CPU上运行"
        },
        {
          "line_no": 120,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "基查检础",
          "snippet": "        # 基础检查"
        },
        {
          "line_no": 124,
          "match_count": 12,
          "indices": [
            10,
            11,
            15,
            16,
            17,
            18,
            22,
            23,
            24,
            25,
            26,
            27
          ],
          "unique_matched_chars": "上则可在如并果比用行较运",
          "snippet": "        # 如果GPU可用则在GPU上运行并比较"
        },
        {
          "line_no": 132,
          "match_count": 6,
          "indices": [
            25,
            26,
            27,
            28,
            29,
            30
          ],
          "unique_matched_chars": "大差度异最梯",
          "snippet": "            print(f\"Input梯度最大差异: {max_diff.item()}\")"
        },
        {
          "line_no": 135,
          "match_count": 13,
          "indices": [
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43
          ],
          "unique_matched_chars": "值出大差度异最梯超阈，",
          "snippet": "                        f\"Input梯度差异超出阈值，最大差异: {max_diff.item()}\")"
        },
        {
          "line_no": 137,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "型对度梯模比",
          "snippet": "            # 模型梯度对比"
        },
        {
          "line_no": 140,
          "match_count": 8,
          "indices": [
            24,
            25,
            26,
            27,
            33,
            34,
            35,
            36
          ],
          "unique_matched_chars": "参大差度异数最梯",
          "snippet": "                print(f\"参数梯度 {i} 最大差异: {diff.item()}\")"
        },
        {
          "line_no": 142,
          "match_count": 15,
          "indices": [
            30,
            31,
            32,
            33,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49
          ],
          "unique_matched_chars": "值出参大差度异数最梯超阈，",
          "snippet": "                            f\"参数梯度 {i} 差异超出阈值，最大差异: {diff.item()}\")"
        },
        {
          "line_no": 148,
          "match_count": 6,
          "indices": [
            12,
            13,
            14,
            18,
            19,
            20
          ],
          "unique_matched_chars": "上保在确行运",
          "snippet": "    #     # 确保在CPU上运行"
        },
        {
          "line_no": 155,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "化可图算视计",
          "snippet": "    #     # # 可视化计算图"
        },
        {
          "line_no": 159,
          "match_count": 6,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17
          ],
          "unique_matched_chars": "传反向播查检",
          "snippet": "    #     # 反向传播检查"
        },
        {
          "line_no": 163,
          "match_count": 7,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "在存度性梯证验",
          "snippet": "    #     # 验证梯度存在性"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/local_chat.py",
      "encoding": "utf-8",
      "file_match_count": 171,
      "lines": [
        {
          "line_no": 57,
          "match_count": 10,
          "indices": [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "串件入写字定将指文符",
          "snippet": "    将字符串写入指定文件 "
        },
        {
          "line_no": 58,
          "match_count": 9,
          "indices": [
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28
          ],
          "unique_matched_chars": "串入内写字容的符要",
          "snippet": "    :param content: 要写入的字符串内容 "
        },
        {
          "line_no": 59,
          "match_count": 6,
          "indices": [
            22,
            23,
            24,
            25,
            26,
            27
          ],
          "unique_matched_chars": "件径文标目路",
          "snippet": "    :param file_path: 目标文件路径 "
        },
        {
          "line_no": 60,
          "match_count": 22,
          "indices": [
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            40,
            41,
            42,
            43,
            44
          ],
          "unique_matched_chars": "为件入写加可开式打文模盖覆认追选默（），",
          "snippet": "    :param mode: 文件打开模式（默认'w'为覆盖写入，可选'a'追加写入）"
        },
        {
          "line_no": 61,
          "match_count": 8,
          "indices": [
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            33
          ],
          "unique_matched_chars": "件文码编认默（）",
          "snippet": "    :param encoding: 文件编码（默认utf-8）"
        },
        {
          "line_no": 190,
          "match_count": 31,
          "indices": [
            16,
            17,
            18,
            19,
            20,
            25,
            26,
            27,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57
          ],
          "unique_matched_chars": "一下他判原后在型处如式把推断是来果格模理的行起跟进面，",
          "snippet": "        # TODO: 判断如果是GGUF格式的adapter，把他跟原来的模型一起处理一下，在后面进行推"
        },
        {
          "line_no": 244,
          "match_count": 22,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            57,
            58
          ],
          "unique_matched_chars": "不义你准前向定径意标注用的自走路这里，：",
          "snippet": "    #     # 注意：这里用 input_ids，走标准前向，不走你自定义的 inputs_emb"
        },
        {
          "line_no": 248,
          "match_count": 26,
          "indices": [
            8,
            9,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            39,
            40,
            41
          ],
          "unique_matched_chars": "—“”一为作你势即可对尚拍时次用的立趋问题（）",
          "snippet": "    # # —— 立即对拍一次（可用你的“时尚趋势”问题作为 prompt）——"
        },
        {
          "line_no": 254,
          "match_count": 13,
          "indices": [
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80
          ],
          "unique_matched_chars": "今你势吗听尚年时的说趋过？",
          "snippet": "oken_argmax_baseline(model, tokenizer, \"你听说过今年的时尚趋势吗？\", torch_device)"
        },
        {
          "line_no": 326,
          "match_count": 3,
          "indices": [
            61,
            62,
            63
          ],
          "unique_matched_chars": "形状，",
          "snippet": "ns=enc_pred[\"input_ids\"],   # numpy[int]，形状 [B, T_pred]"
        },
        {
          "line_no": 327,
          "match_count": 3,
          "indices": [
            61,
            62,
            63
          ],
          "unique_matched_chars": "形状，",
          "snippet": "=enc_ref[\"input_ids\"]       # numpy[int]，形状 [B, T_ref]"
        },
        {
          "line_no": 451,
          "match_count": 18,
          "indices": [
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94
          ],
          "unique_matched_chars": "。不个写前建截断是目能议超过还这，",
          "snippet": "est_adapter/western_test.json\", # TODO: 目前这个不能超过512token，建议还是写个截断。"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/lora_test_module.py",
      "encoding": "utf-8",
      "file_match_count": 167,
      "lines": [
        {
          "line_no": 36,
          "match_count": 7,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "unique_matched_chars": "原始层性拟模线",
          "snippet": "        # 模拟原始线性层"
        },
        {
          "line_no": 58,
          "match_count": 11,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
          ],
          "unique_matched_chars": "充初化参填始必数的要需",
          "snippet": "        # 需填充必要的初始化参数"
        },
        {
          "line_no": 68,
          "match_count": 18,
          "indices": [
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            105,
            106,
            107,
            108
          ],
          "unique_matched_chars": "不也以合在存很所有没理矩置转这里阵，",
          "snippet": "ght), mode = InferenceState.GENERATE) # 这里不存在矩阵转置，所以没有TBackward也很合理"
        },
        {
          "line_no": 72,
          "match_count": 13,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            66,
            67,
            68
          ],
          "unique_matched_chars": "一个以所有的矩置转这里阵，",
          "snippet": "2 = nn.Linear(2048, 3072, bias=False) # 这里有一个矩阵转置的T，所以TBackward"
        },
        {
          "line_no": 85,
          "match_count": 11,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
          ],
          "unique_matched_chars": "充初化参填始必数的要需",
          "snippet": "        # 需填充必要的初始化参数"
        },
        {
          "line_no": 95,
          "match_count": 18,
          "indices": [
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            88,
            89,
            90,
            91
          ],
          "unique_matched_chars": "不也以合在存很所有没理矩置转这里阵，",
          "snippet": "=nn.Parameter(weight), device=\"cuda\") # 这里不存在矩阵转置，所以没有TBackward也很合理"
        },
        {
          "line_no": 98,
          "match_count": 13,
          "indices": [
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            66,
            67,
            68
          ],
          "unique_matched_chars": "一个以所有的矩置转这里阵，",
          "snippet": "2 = nn.Linear(2048, 3072, bias=False) # 这里有一个矩阵转置的T，所以TBackward"
        },
        {
          "line_no": 116,
          "match_count": 5,
          "indices": [
            4,
            5,
            6,
            7,
            8
          ],
          "unique_matched_chars": "型基对模础",
          "snippet": "# # 对基础模型 WELL DONE for test!"
        },
        {
          "line_no": 126,
          "match_count": 3,
          "indices": [
            4,
            11,
            12
          ],
          "unique_matched_chars": "型对模",
          "snippet": "# # 对 LoRA 模型"
        },
        {
          "line_no": 143,
          "match_count": 9,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
          ],
          "unique_matched_chars": "初到动化型始并模移",
          "snippet": "# 初始化模型并移动到GPU"
        },
        {
          "line_no": 146,
          "match_count": 4,
          "indices": [
            2,
            3,
            8,
            9
          ],
          "unique_matched_chars": "参数置配",
          "snippet": "# 配置LoRA参数"
        },
        {
          "line_no": 148,
          "match_count": 1,
          "indices": [
            16
          ],
          "unique_matched_chars": "秩",
          "snippet": "    r=8,  # LoRA秩"
        },
        {
          "line_no": 150,
          "match_count": 8,
          "indices": [
            34,
            35,
            36,
            37,
            38,
            43,
            44,
            45
          ],
          "unique_matched_chars": "入块定指模注的要",
          "snippet": "    target_modules=[\"linear\"],  # 指定要注入LoRA的模块"
        },
        {
          "line_no": 155,
          "match_count": 5,
          "indices": [
            2,
            3,
            8,
            9,
            10
          ],
          "unique_matched_chars": "器应用适配",
          "snippet": "# 应用LoRA适配器"
        },
        {
          "line_no": 157,
          "match_count": 11,
          "indices": [
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            34,
            35
          ],
          "unique_matched_chars": "入型构查模注看确结认，",
          "snippet": "print(peft_model)  # 查看模型结构，确认LoRA注入"
        },
        {
          "line_no": 159,
          "match_count": 6,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "unique_matched_chars": "入成测生试输",
          "snippet": "# 生成测试输入"
        },
        {
          "line_no": 162,
          "match_count": 4,
          "indices": [
            2,
            3,
            4,
            5
          ],
          "unique_matched_chars": "传前向播",
          "snippet": "# 前向传播"
        },
        {
          "line_no": 165,
          "match_count": 15,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "unique_matched_chars": "参图意成所捉捕数有注生算计（）",
          "snippet": "# 生成计算图（注意捕捉所有参数）"
        },
        {
          "line_no": 169,
          "match_count": 5,
          "indices": [
            2,
            3,
            4,
            8,
            9
          ],
          "unique_matched_chars": "为件保存文",
          "snippet": "# 保存为SVG文件"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/test_pytorch_q8.py",
      "encoding": "utf-8",
      "file_match_count": 154,
      "lines": [
        {
          "line_no": 3,
          "match_count": 14,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "一个义包含型定层性模浮点的线",
          "snippet": "# 定义一个包含线性层的浮点模型"
        },
        {
          "line_no": 12,
          "match_count": 8,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "unique_matched_chars": "例创型实建模浮点",
          "snippet": "# 创建浮点模型实例"
        },
        {
          "line_no": 17,
          "match_count": 8,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "unique_matched_chars": "例创化型实建模量",
          "snippet": "# 创建量化模型实例"
        },
        {
          "line_no": 19,
          "match_count": 6,
          "indices": [
            27,
            28,
            29,
            30,
            31,
            32
          ],
          "unique_matched_chars": "原型始模浮点",
          "snippet": "    model_fp32,          # 原始浮点模型"
        },
        {
          "line_no": 20,
          "match_count": 9,
          "indices": [
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35
          ],
          "unique_matched_chars": "化合型层的类要量集",
          "snippet": "    {torch.nn.Linear},   # 要量化的层类型集合"
        },
        {
          "line_no": 21,
          "match_count": 9,
          "indices": [
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35
          ],
          "unique_matched_chars": "化型据数标的目类量",
          "snippet": "    dtype=torch.qint8    # 量化的目标数据类型"
        },
        {
          "line_no": 24,
          "match_count": 4,
          "indices": [
            2,
            3,
            4,
            5
          ],
          "unique_matched_chars": "型模测试",
          "snippet": "# 测试模型"
        },
        {
          "line_no": 26,
          "match_count": 8,
          "indices": [
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63
          ],
          "unique_matched_chars": "入成据数机生输随",
          "snippet": "ch.randn(1, batch_size, in_features)  # 生成随机输入数据"
        },
        {
          "line_no": 27,
          "match_count": 10,
          "indices": [
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62
          ],
          "unique_matched_chars": "化型据数模行过运通量",
          "snippet": " model_int8(input_fp32)               # 通过量化模型运行数据"
        },
        {
          "line_no": 29,
          "match_count": 8,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "unique_matched_chars": "出印形打状证输验",
          "snippet": "# 打印输出形状验证"
        },
        {
          "line_no": 30,
          "match_count": 4,
          "indices": [
            8,
            9,
            10,
            11
          ],
          "unique_matched_chars": "入形状输",
          "snippet": "print(f\"输入形状: {input_fp32.shape}\")"
        },
        {
          "line_no": 31,
          "match_count": 4,
          "indices": [
            8,
            9,
            10,
            11
          ],
          "unique_matched_chars": "出形状输",
          "snippet": "print(f\"输出形状: {output_int8.shape}\")"
        },
        {
          "line_no": 33,
          "match_count": 14,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "出化原和型始模比的较输量",
          "snippet": "# 比较原始模型和量化模型的输出"
        },
        {
          "line_no": 37,
          "match_count": 7,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "个值几出前的输",
          "snippet": "print(f\"FP32输出的前几个值: {output_fp32[0, :5]}\")"
        },
        {
          "line_no": 38,
          "match_count": 7,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "个值几出前的输",
          "snippet": "print(f\"INT8输出的前几个值: {output_int8[0, :5]}\")"
        },
        {
          "line_no": 40,
          "match_count": 6,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "unique_matched_chars": "均差平算计误",
          "snippet": "# 计算平均误差"
        },
        {
          "line_no": 42,
          "match_count": 6,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "均对差平绝误",
          "snippet": "print(f\"平均绝对误差: {error}\")"
        },
        {
          "line_no": 44,
          "match_count": 8,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "unique_matched_chars": "信印型息打模类",
          "snippet": "# 打印模型类型信息"
        },
        {
          "line_no": 45,
          "match_count": 7,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14
          ],
          "unique_matched_chars": "前化型模类量",
          "snippet": "print(f\"量化前模型类型: {type(model_fp32.linear)}\")"
        },
        {
          "line_no": 46,
          "match_count": 7,
          "indices": [
            8,
            9,
            10,
            11,
            12,
            13,
            14
          ],
          "unique_matched_chars": "化后型模类量",
          "snippet": "print(f\"量化后模型类型: {type(model_int8.linear)}\")"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/util/utils.py",
      "encoding": "utf-8",
      "file_match_count": 73,
      "lines": [
        {
          "line_no": 143,
          "match_count": 32,
          "indices": [
            12,
            13,
            14,
            15,
            29,
            30,
            31,
            32,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79
          ],
          "unique_matched_chars": "不为了先前加参后因太把接改数来烦目直看要设起载面麻（），",
          "snippet": "    # TODO: 目前先把requires_grad直接设为True了，后面看看要不要改（因为loa"
        },
        {
          "line_no": 354,
          "match_count": 23,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40
          ],
          "unique_matched_chars": "不为会修块改是有然知要这道错，",
          "snippet": "    # TODO: 这块不知道是不是要修改为cuda:0，不知道不然会不会有错"
        },
        {
          "line_no": 538,
          "match_count": 18,
          "indices": [
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39
          ],
          "unique_matched_chars": "。不会值入写出只回在将时端终输返，",
          "snippet": "    echo_stream=False 时，将不会在终端输出，只写入返回值。"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/sft/flops_utils/lora_test_utils.py",
      "encoding": "utf-8",
      "file_match_count": 57,
      "lines": [
        {
          "line_no": 189,
          "match_count": 9,
          "indices": [
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "unique_matched_chars": "印图归打点算节计递",
          "snippet": "    \"\"\"递归打印计算图节点\"\"\""
        },
        {
          "line_no": 215,
          "match_count": 6,
          "indices": [
            23,
            24,
            33,
            34,
            35,
            36
          ],
          "unique_matched_chars": "参度数梯范",
          "snippet": "            print(f\"MoE参数 {name} 梯度范数: {grad_norm}\")"
        },
        {
          "line_no": 217,
          "match_count": 5,
          "indices": [
            23,
            24,
            33,
            34,
            35
          ],
          "unique_matched_chars": "参度数无梯",
          "snippet": "            print(f\"MoE参数 {name} 无梯度\")"
        },
        {
          "line_no": 256,
          "match_count": 4,
          "indices": [
            33,
            34,
            35,
            36
          ],
          "unique_matched_chars": "证过通验",
          "snippet": "            print(f\"{layer_path} 验证通过\")"
        },
        {
          "line_no": 258,
          "match_count": 10,
          "indices": [
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42
          ],
          "unique_matched_chars": "大失差最证误败验！：",
          "snippet": "            print(f\"{layer_path} 验证失败！最大误差：{torch.max(torch.abs(manual_out"
        },
        {
          "line_no": 278,
          "match_count": 14,
          "indices": [
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            16,
            17,
            18,
            19,
            35
          ],
          "unique_matched_chars": "。历型层并归找查模用调递遍，",
          "snippet": "    递归遍历模型，查找MoE层并调用print_moe_stats。"
        },
        {
          "line_no": 297,
          "match_count": 9,
          "indices": [
            4,
            5,
            6,
            13,
            14,
            15,
            39,
            40,
            41
          ],
          "unique_matched_chars": "保入到前存当把的输",
          "snippet": "    把当前 step 的输入 / loss / grad / param 保存到 lo"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/api/openai/endpoints/chat.py",
      "encoding": "utf-8",
      "file_match_count": 50,
      "lines": [
        {
          "line_no": 62,
          "match_count": 2,
          "indices": [
            32,
            49
          ],
          "unique_matched_chars": "｜",
          "snippet": "    tool_calls_begin_marker = \"<｜tool▁calls▁begin｜>\""
        },
        {
          "line_no": 63,
          "match_count": 2,
          "indices": [
            31,
            47
          ],
          "unique_matched_chars": "｜",
          "snippet": "    tool_call_begin_marker = \"<｜tool▁call▁begin｜>\""
        },
        {
          "line_no": 64,
          "match_count": 2,
          "indices": [
            24,
            33
          ],
          "unique_matched_chars": "｜",
          "snippet": "    tool_sep_marker = \"<｜tool▁sep｜>\""
        },
        {
          "line_no": 65,
          "match_count": 2,
          "indices": [
            29,
            43
          ],
          "unique_matched_chars": "｜",
          "snippet": "    tool_call_end_marker = \"<｜tool▁call▁end｜>\""
        },
        {
          "line_no": 66,
          "match_count": 2,
          "indices": [
            30,
            45
          ],
          "unique_matched_chars": "｜",
          "snippet": "    tool_calls_end_marker = \"<｜tool▁calls▁end｜>\""
        },
        {
          "line_no": 253,
          "match_count": 2,
          "indices": [
            40,
            57
          ],
          "unique_matched_chars": "｜",
          "snippet": "            tool_calls_begin_marker = \"<｜tool▁calls▁begin｜>\""
        },
        {
          "line_no": 254,
          "match_count": 2,
          "indices": [
            39,
            55
          ],
          "unique_matched_chars": "｜",
          "snippet": "            tool_call_begin_marker = \"<｜tool▁call▁begin｜>\""
        },
        {
          "line_no": 255,
          "match_count": 2,
          "indices": [
            32,
            41
          ],
          "unique_matched_chars": "｜",
          "snippet": "            tool_sep_marker = \"<｜tool▁sep｜>\""
        },
        {
          "line_no": 256,
          "match_count": 2,
          "indices": [
            37,
            51
          ],
          "unique_matched_chars": "｜",
          "snippet": "            tool_call_end_marker = \"<｜tool▁call▁end｜>\""
        },
        {
          "line_no": 257,
          "match_count": 2,
          "indices": [
            38,
            53
          ],
          "unique_matched_chars": "｜",
          "snippet": "            tool_calls_end_marker = \"<｜tool▁calls▁end｜>\""
        },
        {
          "line_no": 259,
          "match_count": 2,
          "indices": [
            34,
            51
          ],
          "unique_matched_chars": "｜",
          "snippet": "                \"<tools▁begin>\":\"<｜tool▁calls▁begin｜>\","
        },
        {
          "line_no": 260,
          "match_count": 2,
          "indices": [
            33,
            49
          ],
          "unique_matched_chars": "｜",
          "snippet": "                \"<tool▁begin>\":\"<｜tool▁call▁begin｜>\","
        },
        {
          "line_no": 261,
          "match_count": 2,
          "indices": [
            31,
            40
          ],
          "unique_matched_chars": "｜",
          "snippet": "                \"<tool▁sep>\":\"<｜tool▁sep｜>\","
        },
        {
          "line_no": 262,
          "match_count": 2,
          "indices": [
            31,
            45
          ],
          "unique_matched_chars": "｜",
          "snippet": "                \"<tool▁end>\":\"<｜tool▁call▁end｜>\","
        },
        {
          "line_no": 263,
          "match_count": 2,
          "indices": [
            32,
            47
          ],
          "unique_matched_chars": "｜",
          "snippet": "                \"<tools▁end>\":\"<｜tool▁calls▁end｜>\""
        },
        {
          "line_no": 424,
          "match_count": 2,
          "indices": [
            36,
            53
          ],
          "unique_matched_chars": "｜",
          "snippet": "        tool_calls_begin_marker = \"<｜tool▁calls▁begin｜>\""
        },
        {
          "line_no": 425,
          "match_count": 2,
          "indices": [
            35,
            51
          ],
          "unique_matched_chars": "｜",
          "snippet": "        tool_call_begin_marker = \"<｜tool▁call▁begin｜>\""
        },
        {
          "line_no": 426,
          "match_count": 2,
          "indices": [
            28,
            37
          ],
          "unique_matched_chars": "｜",
          "snippet": "        tool_sep_marker = \"<｜tool▁sep｜>\""
        },
        {
          "line_no": 427,
          "match_count": 2,
          "indices": [
            33,
            47
          ],
          "unique_matched_chars": "｜",
          "snippet": "        tool_call_end_marker = \"<｜tool▁call▁end｜>\""
        },
        {
          "line_no": 428,
          "match_count": 2,
          "indices": [
            34,
            49
          ],
          "unique_matched_chars": "｜",
          "snippet": "        tool_calls_end_marker = \"<｜tool▁calls▁end｜>\""
        },
        {
          "line_no": 430,
          "match_count": 2,
          "indices": [
            30,
            47
          ],
          "unique_matched_chars": "｜",
          "snippet": "            \"<tools▁begin>\":\"<｜tool▁calls▁begin｜>\","
        },
        {
          "line_no": 431,
          "match_count": 2,
          "indices": [
            29,
            45
          ],
          "unique_matched_chars": "｜",
          "snippet": "            \"<tool▁begin>\":\"<｜tool▁call▁begin｜>\","
        },
        {
          "line_no": 432,
          "match_count": 2,
          "indices": [
            27,
            36
          ],
          "unique_matched_chars": "｜",
          "snippet": "            \"<tool▁sep>\":\"<｜tool▁sep｜>\","
        },
        {
          "line_no": 433,
          "match_count": 2,
          "indices": [
            27,
            41
          ],
          "unique_matched_chars": "｜",
          "snippet": "            \"<tool▁end>\":\"<｜tool▁call▁end｜>\","
        },
        {
          "line_no": 434,
          "match_count": 2,
          "indices": [
            28,
            43
          ],
          "unique_matched_chars": "｜",
          "snippet": "            \"<tools▁end>\":\"<｜tool▁calls▁end｜>\""
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/sft/peft_utils/lora_layer.py",
      "encoding": "utf-8",
      "file_match_count": 45,
      "lines": [
        {
          "line_no": 33,
          "match_count": 10,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "不做卷处层时暂理的积",
          "snippet": "    # TODO: 暂时不做卷积层的处理"
        },
        {
          "line_no": 51,
          "match_count": 6,
          "indices": [
            10,
            11,
            12,
            32,
            33,
            34
          ],
          "unique_matched_chars": "加处对添理的",
          "snippet": "        # 添加对KTransformersLinear的处理"
        },
        {
          "line_no": 292,
          "match_count": 9,
          "indices": [
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55
          ],
          "unique_matched_chars": "传参实数查的看递际",
          "snippet": " # print(\"Received kwargs:\", kwargs)  # 查看实际传递的参数"
        },
        {
          "line_no": 1016,
          "match_count": 8,
          "indices": [
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73
          ],
          "unique_matched_chars": "保原始序承持继顺",
          "snippet": "ora(KTransformersLinear, LoraLayer):  # 保持原始继承顺序"
        },
        {
          "line_no": 1035,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "先初化始",
          "snippet": "        # 先初始化KTransformersLinear"
        },
        {
          "line_no": 1041,
          "match_count": 4,
          "indices": [
            52,
            53,
            54,
            55
          ],
          "unique_matched_chars": "传明确递",
          "snippet": "orig_module=orig_module.orig_module,  # 明确传递orig_module"
        },
        {
          "line_no": 1049,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "再初化始",
          "snippet": "        # 再初始化LoraLayer"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/balance_serve/inference/query_manager.py",
      "encoding": "utf-8",
      "file_match_count": 38,
      "lines": [
        {
          "line_no": 45,
          "match_count": 8,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17
          ],
          "unique_matched_chars": "个件停历条止每遍",
          "snippet": "        # 遍历每个停止条件"
        },
        {
          "line_no": 49,
          "match_count": 11,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            35,
            36,
            37,
            38
          ],
          "unique_matched_chars": "件停如条果止比跳过长，",
          "snippet": "            # 如果停止条件比 query_tokens 长，跳过"
        },
        {
          "line_no": 60,
          "match_count": 9,
          "indices": [
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39
          ],
          "unique_matched_chars": "件停到匹找条止的配",
          "snippet": "                return True  # 找到匹配的停止条件"
        },
        {
          "line_no": 63,
          "match_count": 10,
          "indices": [
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33
          ],
          "unique_matched_chars": "件任何停到找有条止没",
          "snippet": "        return False  # 没有找到任何停止条件"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/sft/torchviz_test.py",
      "encoding": "utf-8",
      "file_match_count": 38,
      "lines": [
        {
          "line_no": 5,
          "match_count": 13,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14
          ],
          "unique_matched_chars": "一个义单定构架的神简经络网",
          "snippet": "# 定义一个简单的神经网络架构"
        },
        {
          "line_no": 19,
          "match_count": 6,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "unique_matched_chars": "例创型实建模",
          "snippet": "# 创建模型实例"
        },
        {
          "line_no": 22,
          "match_count": 8,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
          ],
          "unique_matched_chars": "一个入成机生输随",
          "snippet": "# 生成一个随机输入"
        },
        {
          "line_no": 25,
          "match_count": 4,
          "indices": [
            2,
            3,
            4,
            5
          ],
          "unique_matched_chars": "传前向播",
          "snippet": "# 前向传播"
        },
        {
          "line_no": 28,
          "match_count": 7,
          "indices": [
            2,
            3,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "使化可用行视进",
          "snippet": "# 使用 torchviz 进行可视化"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/operators/linear.py",
      "encoding": "utf-8",
      "file_match_count": 29,
      "lines": [
        {
          "line_no": 230,
          "match_count": 18,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27
          ],
          "unique_matched_chars": "为乘使做原始拟权模法用矩行重阵，",
          "snippet": "        # 使用原始权重做矩阵乘法，模拟原始行为"
        },
        {
          "line_no": 232,
          "match_count": 11,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
          ],
          "unique_matched_chars": "乘化反权法矩行进重量阵",
          "snippet": "        # 反量化权重进行矩阵乘法"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/mmlu_pro_test.py",
      "encoding": "utf-8",
      "file_match_count": 28,
      "lines": [
        {
          "line_no": 26,
          "match_count": 4,
          "indices": [
            10,
            11,
            21,
            22
          ],
          "unique_matched_chars": "件取文读",
          "snippet": "        # 读取 Parquet 文件"
        },
        {
          "line_no": 34,
          "match_count": 7,
          "indices": [
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "unique_matched_chars": "为将换据数转集",
          "snippet": "        # # 将数据集转换为 Pandas DataFrame"
        },
        {
          "line_no": 51,
          "match_count": 8,
          "indices": [
            10,
            11,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "。查的看选项",
          "snippet": "        # 查看ABCD。。。的选项"
        },
        {
          "line_no": 84,
          "match_count": 2,
          "indices": [
            10,
            11
          ],
          "unique_matched_chars": "加添",
          "snippet": "        # 添加 API Key"
        },
        {
          "line_no": 111,
          "match_count": 7,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11,
            12
          ],
          "unique_matched_chars": "子数机种置设随",
          "snippet": "    # 设置随机数种子"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/mmlu_test.py",
      "encoding": "utf-8",
      "file_match_count": 21,
      "lines": [
        {
          "line_no": 26,
          "match_count": 4,
          "indices": [
            10,
            11,
            21,
            22
          ],
          "unique_matched_chars": "件取文读",
          "snippet": "        # 读取 Parquet 文件"
        },
        {
          "line_no": 42,
          "match_count": 8,
          "indices": [
            10,
            11,
            16,
            17,
            18,
            19,
            20,
            21
          ],
          "unique_matched_chars": "。查的看选项",
          "snippet": "        # 查看ABCD。。。的选项"
        },
        {
          "line_no": 75,
          "match_count": 2,
          "indices": [
            10,
            11
          ],
          "unique_matched_chars": "加添",
          "snippet": "        # 添加 API Key"
        },
        {
          "line_no": 102,
          "match_count": 7,
          "indices": [
            5,
            6,
            7,
            8,
            9,
            10,
            11
          ],
          "unique_matched_chars": "子数机种置设随",
          "snippet": "   # 设置随机数种子"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/balance_serve/inference/model_runner.py",
      "encoding": "utf-8",
      "file_match_count": 15,
      "lines": [
        {
          "line_no": 43,
          "match_count": 11,
          "indices": [
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            22
          ],
          "unique_matched_chars": "不入合如掉果求符要输，",
          "snippet": "    # 如果输入不符合要求，assert掉"
        },
        {
          "line_no": 63,
          "match_count": 4,
          "indices": [
            10,
            11,
            12,
            13
          ],
          "unique_matched_chars": "先掉注释",
          "snippet": "        # 先注释掉"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/api/ollama/completions.py",
      "encoding": "utf-8",
      "file_match_count": 15,
      "lines": [
        {
          "line_no": 149,
          "match_count": 9,
          "indices": [
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43
          ],
          "unique_matched_chars": "始开录时秒记间（）",
          "snippet": "            start_time = time()  # 记录开始时间（秒）"
        },
        {
          "line_no": 164,
          "match_count": 6,
          "indices": [
            14,
            15,
            16,
            17,
            18,
            19
          ],
          "unique_matched_chars": "性据数算能计",
          "snippet": "            # 计算性能数据"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/util/globals.py",
      "encoding": "utf-8",
      "file_match_count": 15,
      "lines": [
        {
          "line_no": 5,
          "match_count": 5,
          "indices": [
            10,
            11,
            12,
            13,
            14
          ],
          "unique_matched_chars": "值置认设默",
          "snippet": "        # 设置默认值"
        },
        {
          "line_no": 28,
          "match_count": 10,
          "indices": [
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
          ],
          "unique_matched_chars": "他例供其单块实模，",
          "snippet": "# 单例实例，供其他模块 import"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/util/custom_loader.py",
      "encoding": "utf-8",
      "file_match_count": 15,
      "lines": [
        {
          "line_no": 48,
          "match_count": 15,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24
          ],
          "unique_matched_chars": "件传保入处夹径文是理确路，",
          "snippet": "        # 处理传入路径，确保是文件夹路径"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/utils/sql_utils.py",
      "encoding": "utf-8",
      "file_match_count": 14,
      "lines": [
        {
          "line_no": 119,
          "match_count": 9,
          "indices": [
            45,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54
          ],
          "unique_matched_chars": "中为否字是查检段的",
          "snippet": "           if what[key] is not None:  # 检查b中的字段是否为None"
        },
        {
          "line_no": 120,
          "match_count": 5,
          "indices": [
            57,
            58,
            60,
            61,
            62
          ],
          "unique_matched_chars": "字新更段的",
          "snippet": "   setattr(existing, key, what[key])  # 更新a的字段"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/server/backend/interfaces/balance_serve.py",
      "encoding": "utf-8",
      "file_match_count": 13,
      "lines": [
        {
          "line_no": 117,
          "match_count": 13,
          "indices": [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            29,
            30
          ],
          "unique_matched_chars": "享共变和子无法父程进量",
          "snippet": "        # 子进程和父进程无法共享 config 变量"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/sft/metrics.py",
      "encoding": "utf-8",
      "file_match_count": 12,
      "lines": [
        {
          "line_no": 101,
          "match_count": 12,
          "indices": [
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73
          ],
          "unique_matched_chars": "传入单参可多条考；",
          "snippet": " [reference]                          # 单参考；多参考可传入多条 list"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/test_client.py",
      "encoding": "utf-8",
      "file_match_count": 12,
      "lines": [
        {
          "line_no": 66,
          "match_count": 12,
          "indices": [
            18,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37
          ],
          "unique_matched_chars": "一下完式性接收整模次非，",
          "snippet": "                # 非 stream 模式下，一次性接收完整 json"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/test_speed.py",
      "encoding": "utf-8",
      "file_match_count": 8,
      "lines": [
        {
          "line_no": 31,
          "match_count": 2,
          "indices": [
            0,
            13
          ],
          "unique_matched_chars": "“”",
          "snippet": "“Little tyke,” chortled Mr. Dursley as he"
        },
        {
          "line_no": 32,
          "match_count": 1,
          "indices": [
            88
          ],
          "unique_matched_chars": "—",
          "snippet": "ed the first sign of something peculiar — a cat reading a map. "
        },
        {
          "line_no": 33,
          "match_count": 1,
          "indices": [
            58
          ],
          "unique_matched_chars": "—",
          "snippet": "Dursley didn't realize what he had seen — then he jerked his head around to look "
        },
        {
          "line_no": 37,
          "match_count": 1,
          "indices": [
            51
          ],
          "unique_matched_chars": "—",
          "snippet": "reading the sign that said Privet Drive — no, looking at the sign; cats couldn't "
        },
        {
          "line_no": 42,
          "match_count": 1,
          "indices": [
            80
          ],
          "unique_matched_chars": "—",
          "snippet": "ear people who dressed in funny clothes — the getups you saw on young people! "
        },
        {
          "line_no": 45,
          "match_count": 2,
          "indices": [
            89,
            143
          ],
          "unique_matched_chars": "—…",
          "snippet": "that this was probably some silly stunt — these people were obviously collecting "
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/util/inference_state.py",
      "encoding": "utf-8",
      "file_match_count": 7,
      "lines": [
        {
          "line_no": 1,
          "match_count": 7,
          "indices": [
            2,
            3,
            33,
            75,
            76,
            77,
            78
          ],
          "unique_matched_chars": "不和引循然环用",
          "snippet": "# 不然util/utils.py: InferenceState和sft/peft_"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/AIME_2024/eval_api.py",
      "encoding": "utf-8",
      "file_match_count": 6,
      "lines": [
        {
          "line_no": 20,
          "match_count": 2,
          "indices": [
            10,
            11
          ],
          "unique_matched_chars": "加添",
          "snippet": "        # 添加 API Key"
        },
        {
          "line_no": 45,
          "match_count": 4,
          "indices": [
            10,
            11,
            21,
            22
          ],
          "unique_matched_chars": "件取文读",
          "snippet": "        # 读取 Parquet 文件"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/util/grad_wrapper.py",
      "encoding": "utf-8",
      "file_match_count": 6,
      "lines": [
        {
          "line_no": 27,
          "match_count": 3,
          "indices": [
            10,
            11,
            12
          ],
          "unique_matched_chars": "了使用",
          "snippet": "        # 使用了 @maybe_no_grad()"
        },
        {
          "line_no": 30,
          "match_count": 3,
          "indices": [
            10,
            11,
            12
          ],
          "unique_matched_chars": "了使用",
          "snippet": "        # 使用了 @maybe_no_grad"
        }
      ]
    },
    {
      "path": "/home/lpl/KT-SFT/ktransformers/tests/humaneval/eval_api.py",
      "encoding": "utf-8",
      "file_match_count": 2,
      "lines": [
        {
          "line_no": 15,
          "match_count": 2,
          "indices": [
            10,
            11
          ],
          "unique_matched_chars": "加添",
          "snippet": "        # 添加 API Key"
        }
      ]
    }
  ]
}